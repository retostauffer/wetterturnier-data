
# - Avoid filling up the /var/spool/mail/ directory.
#   Do not mail cron output.
MAILTO=""

# - Necessary that python (in cron) can find its executables
#   especially when calling subprocess.popen
PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/imgi/bin

# - Downloading a set of forecast and analysis maps from the
#   mira.met.fu-berlin.de ftp server and prepare them for the
#   wetterturnier. ECMWF, ICON, COSMO-DE, ...
#   See README file inside the direcotry for more details.
15-59/30 * * * * cd /home/imgi/ForecastProducts && timeout 1000 ionice -c 2 -n 0 ../venv/bin/python DownloadAll.py &> /home/imgi/cronlog/cron.DownloadAll.log

# - Produce GENS visualization and store data.
#   GENS is the GFS ENSEMBLE.
30 */1 * * *  cd /home/imgi/GENSvis && timeout 1800 ionice -c 2 -n 0 /usr/bin/python GENSvis.py > /home/imgi/cronlog/GENSvis.log 2>&1
30 */1 * * *  cd /home/imgi/GENSvis && timeout 1800 ionice -c 2 -n 0 /usr/bin/python GFSvis.py  > /home/imgi/cronlog/GENSvis.log 2>&1

# - DWDOpendataDownload.py downloads some BUFR messages from an
#   open DWD ftp. As they are open they are copied into the
#   incoming-essential folder. Only files with a time stamp
#   newer than 24h are downloaded.
*/10  *  *  *  *  cd /home/imgi/GISCobservations && ../venv/bin/python DWDOpendataDownload.py > /home/imgi/cronlog/DWDOpendataDownloader.log 2>&1

# - bufr.py takes all available BUFR observation messages and 
#   puts them into the 'obs.live' database.
#   bufr.py also calls derived.py computing some derived
#   variables.
*/5   *  *  *  *  cd /home/imgi/GISCobservations; export PYTHONPATH=/usr/lib/python2.6/site-packages; /usr/bin/python bufr.py &> /home/imgi/cronlog/cron.bufr.log

#OGIMET BUFRs for ZUR
*/15  *  *  *  * cd /home/imgi/OGIMETbufr && /bin/bash get_latest.sh &> /home/imgi/cronlog/cron.ogimet.log

#scp IMGI BUFRs (IBK university) to test server
*/5 * * * * scp /home/imgi/GISCobservations/data-processed/bufr/processed/IMGI_BUFR_$(date +\%Y\%m\%d\%H)*_station_11320.bin root@160.45.76.38:/home/imgi/GISCobservations/incoming-additional/ &> /home/imgi/cronlog/cron.imgi.log

# - Downloading additionals from FTP, marcus beyers user
*/15  *  *  *  *  cd /home/imgi/GISCobservations && timeout 600 ionice -c 2 -n 0 ../venv/bin/python DWDFTPDownloader.py &> /home/imgi/cronlog/cron.DWFFTPdownloader.log

# - There is a python script generating SynopSymbol images (these small things).
#   This is the script which tries to generate them. Once visualized, it will be
#   skipped, so you can call this job quite regularely.
*/5   *  *  *  *  cd /home/imgi/CreateSynopSymbols && timeout 300 ionice -c 2 -n 0 ../venv/bin/python CreateSynopSymbols.py &> /home/imgi/cronlog/cron.CreateSynopSymbols.log

# - CleanUp: clean upd the database.
#   Every 6th hour CleanUp
#   i:   deletes old bufr/synop messages from GISCobservations/data-processed
#   ii:  migrates the 'obs.live' database into the 'obs.archive' database
#        regarding the config in config.conf (GISCobservations/config.conf)
#   iii: removes old observations from 'obs.live' (again, see config.conf)
10  */6  *  *  *  cd /home/imgi/GISCobservations; export PYTHONPATH=/usr/lib/python2.6/site-packages; ionice -c 2 -n 0 /usr/bin/python CleanUp.py &> /home/imgi/cronlog/cron.CleanUp.log

